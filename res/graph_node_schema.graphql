type Query {
    message(id: ID!): Message
    messages(
        skip: Int = 0
        first: Int = 100
        orderBy: Message_orderBy
        orderDirection: OrderDirection
        where: Message_filter
    ): [Message!]!

    bridgeMessage(id: ID!): BridgeMessage
    bridgeMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: BridgeMessage_orderBy
        orderDirection: OrderDirection
        where: BridgeMessage_filter
    ): [BridgeMessage!]!

    validatorMessage(id: ID!): ValidatorMessage
    validatorMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: ValidatorMessage_orderBy
        orderDirection: OrderDirection
        where: ValidatorMessage_filter
    ): [ValidatorMessage!]!
}

type Subscription {
    message(id: ID!): Message
    messages(
        skip: Int = 0
        first: Int = 100
        orderBy: Message_orderBy
        orderDirection: OrderDirection
        where: Message_filter
    ): [Message!]!

    bridgeBridgeMessage(id: ID!): BridgeMessage
    bridgeBridgeMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: BridgeMessage_orderBy
        orderDirection: OrderDirection
        where: BridgeMessage_filter
    ): [BridgeMessage!]!

    validatorMessage(id: ID!): ValidatorMessage
    validatorMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: ValidatorMessage_orderBy
        orderDirection: OrderDirection
        where: ValidatorMessage_filter
    ): [ValidatorMessage!]!
}

type Message {
  id: ID!
  ethAddress: String!
  subAddress: String!
  amount: String!
  status: Status!
  direction: Direction!
  ethBlockNumber: String!
}

type BridgeMessage {
  id: ID!
  action: BridgeMessageAction!
  sender: String
  status: Status!
  ethBlockNumber: String!
}

type ValidatorMessage {
  id: ID!
  action: ValidatorMessageAction!
  validator: String!
  status: Status!
  ethBlockNumber: String!
}

enum Status {
  PENDING
  WITHDRAW
  APPROVED
  CANCELED
  CONFIRMED
}

enum Direction {
  ETH2SUB
  SUB2ETH
}

enum BridgeMessageAction {
  STOP
  START
  PAUSE
  RESUME
}

enum ValidatorMessageAction {
  ADD
  REMOVE
}
