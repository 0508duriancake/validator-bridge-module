type Message @entity {
  id: ID!
  ethAddress: String!
  subAddress: String!
  amount: BigInt!
  status: Status!
  direction: Direction!
  ethBlockNumber: BigInt
}

type BridgeMessage @entity {
  id: ID!
  action: BridgeMessageAction!
  sender: String
  status: Status!
  ethBlockNumber: BigInt!
}

type ValidatorMessage @entity {
  id: ID!
  action: ValidatorMessageAction!
  validator: String!
  status: Status!
  ethBlockNumber: BigInt!
}

type BridgeLimits {
  inHostTransactionValue: Int!
  axHostTransactionValue: Int!
  ayHostMaxLimit: Int!
  ayHostMaxLimitForOneAddress: Int!
  axHostPendingTransactionLimit: Int!
  inGuestTransactionValue: Int!
  axGuestTransactionValue: Int!
  ayGuestMaxLimit: Int!
  ayGuestMaxLimitForOneAddress: Int!
  axGuestPendingTransactionLimit: Int!
}

type Proposal @entity {
  id: ID!
  address: String!
  timestamp: BigInt!
  limits: BridgeLimits!
  status: ProposalStatus!
  ethBlockNumber: BigInt!
}

enum Status {
  PENDING
  WITHDRAW
  APPROVED
  CANCELED
  CONFIRMED
  CONFIRMED_WITHDRAW
}

enum Direction {
  ETH2SUB
  SUB2ETH
}

enum BridgeMessageAction {
  STOP
  START
  PAUSE
  RESUME
}

enum ValidatorMessageAction {
  ADD
  REMOVE
}

enum ProposalStatus {
  PENDING
  APPROVED
  DECLINED
}
