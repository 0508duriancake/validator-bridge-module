type Query {
    message(id: ID!): Message
    messages(
        skip: Int = 0
        first: Int = 100
        orderBy: Message_orderBy
        orderDirection: OrderDirection
        where: Message_filter
    ): [Message!]!

    bridgeMessage(id: ID!): BridgeMessage
    bridgeMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: BridgeMessage_orderBy
        orderDirection: OrderDirection
        where: BridgeMessage_filter
    ): [BridgeMessage!]!

    validatorMessage(id: ID!): ValidatorMessage
    validatorMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: ValidatorMessage_orderBy
        orderDirection: OrderDirection
        where: ValidatorMessage_filter
    ): [ValidatorMessage!]!

    accountMessage(id: ID!): AccountMessage
    accountMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: AccountMessage_orderBy
        orderDirection: OrderDirection
        where: AccountMessage_filter
    ): [AccountMessage!]!

    account(id: ID!): Account
    accounts(
        skip: Int = 0
        first: Int = 100
        orderBy: Account_orderBy
        orderDirection: OrderDirection
        where: Account_filter
    ): [Account!]!

    limitMessage(id: ID!): LimitMessage
    limitMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: LimitMessage_orderBy
        orderDirection: OrderDirection
        where: LimitMessage_filter
    ): [LimitMessage!]!

    limit(id: ID!): Limit
    limits(
        skip: Int = 0
        first: Int = 100
        orderBy: Limit_orderBy
        orderDirection: OrderDirection
        where: Limit_filter
    ): [Limit!]!
}

type Subscription {
    message(id: ID!): Message
    messages(
        skip: Int = 0
        first: Int = 100
        orderBy: Message_orderBy
        orderDirection: OrderDirection
        where: Message_filter
    ): [Message!]!

    bridgeBridgeMessage(id: ID!): BridgeMessage
    bridgeBridgeMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: BridgeMessage_orderBy
        orderDirection: OrderDirection
        where: BridgeMessage_filter
    ): [BridgeMessage!]!

    validatorMessage(id: ID!): ValidatorMessage
    validatorMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: ValidatorMessage_orderBy
        orderDirection: OrderDirection
        where: ValidatorMessage_filter
    ): [ValidatorMessage!]!

    accountMessage(id: ID!): AccountMessage
    accountMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: AccountMessage_orderBy
        orderDirection: OrderDirection
        where: AccountMessage_filter
    ): [AccountMessage!]!

    account(id: ID!): Account
    accounts(
        skip: Int = 0
        first: Int = 100
        orderBy: Account_orderBy
        orderDirection: OrderDirection
        where: Account_filter
    ): [Account!]!

    limitMessage(id: ID!): LimitMessage
    limitMessages(
        skip: Int = 0
        first: Int = 100
        orderBy: LimitMessage_orderBy
        orderDirection: OrderDirection
        where: LimitMessage_filter
    ): [LimitMessage!]!

    limit(id: ID!): Limit
    limits(
        skip: Int = 0
        first: Int = 100
        orderBy: Limit_orderBy
        orderDirection: OrderDirection
        where: Limit_filter
    ): [Limit!]!
}

type Message {
  id: ID!
  ethAddress: String!
  subAddress: String!
  amount: String!
  status: Status!
  direction: Direction!
  ethBlockNumber: String!
}

type BridgeMessage {
  id: ID!
  action: BridgeMessageAction!
  sender: String
  status: Status!
  ethBlockNumber: String!
}

type ValidatorMessage {
  id: ID!
  action: ValidatorMessageAction!
  validator: String!
  status: Status!
  ethBlockNumber: String!
}

type AccountMessage {
  id: ID!
  action: AccountMessageAction!
  direction: Direction!
  ethAddress: String
  subAddress: String
  timestamp: String!
  ethBlockNumber: String!
}

type Account {
  id: ID!
  messageId: String!
  kind: AccountKind!
  status: AccountStatus!
  timestamp: String!
  ethBlockNumber: String!
}

type LimitMessage {
  id: ID!
  minHostTransactionValue: String!
  maxHostTransactionValue: String!
  dayHostMaxLimit: String!
  dayHostMaxLimitForOneAddress: String!
  maxHostPendingTransactionLimit: String!
  minGuestTransactionValue: String!
  maxGuestTransactionValue: String!
  dayGuestMaxLimit: String!
  dayGuestMaxLimitForOneAddress: String!
  maxGuestPendingTransactionLimit: String!
  ethBlockNumber: String!
}

type Limit {
  id: ID!
  value: String!
  messageID: String!
  ethBlockNumber: String!
}

enum Status {
  PENDING
  WITHDRAW
  APPROVED
  CANCELED
  CONFIRMED
}

enum Direction {
  ETH2SUB
  SUB2ETH
}

enum BridgeMessageAction {
  STOP
  START
  PAUSE
  RESUME
}

enum ValidatorMessageAction {
  ADD
  REMOVE
}

enum AccountMessageAction {
  PAUSE
  RESUME
}

enum AccountKind {
  ETH
  SUB
}

enum AccountStatus {
  ACTIVE
  BLOCKED
}
